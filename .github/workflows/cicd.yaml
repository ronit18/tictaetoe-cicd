name: CI/CD pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes/deployment.yaml'
  pull_request:
    branches: [ main ]

jobs:
  test_linting:
    name: Unit testing and Lint
    runs-on: ubuntu-latest
    steps:
      - name: checkoout code
        uses: actions/checkout@v4
      
      - name: setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
     
      - name: install dependencies
        run: npm ci

      - name: run tests
        run: npm test || echo 'no test found'
      
      - name: run ESlint
        run: npm run lint


  build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [test_linting]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}


    steps:
      - name: checkoout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      
      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Set image tag output
        id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
      
  




